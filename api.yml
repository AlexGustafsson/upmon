openapi: 3.0.0


info:
  title: upmon
  description: A cloud-native, distributed uptime monitor written in Go
  version: 0.1.0


servers:
  - url: http://localhost:8080/api/v1
    description: Development server


paths:
  /origins:
    get:
      summary: Retrieve all origins
      tags:
        - Origins
      responses:
        "200":
            description: The retrieved origins
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Origins"
  /origins/{originId}:
    get:
      summary: Retrieve an origin
      tags:
          - Origins
      parameters:
        - $ref: "#/components/parameters/OriginId"
      responses:
        "200":
          description: The retrieved origin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Origin"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /services:
    get:
      summary: Retrieve all monitored services
      tags:
        - Services
      responses:
        "200":
          description: The retrieved services
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Services"
  /origins/{originId}/services:
    get:
      summary: Retrieve all monitored services for an origin
      tags:
        - Services
      parameters:
        - $ref: "#/components/parameters/OriginId"
      responses:
        "200":
          description: The retrieved services
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Services"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /origins/{originId}/services/{serviceId}:
    get:
      summary: Retrieve a service
      tags:
        - Services
      parameters:
        - $ref: "#/components/parameters/OriginId"
        - $ref: "#/components/parameters/ServiceId"
      responses:
        "200":
          description: The retrieved service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /origins/{originId}/services/{serviceId}/status:
    get:
      summary: Retrieve the status of a service
      tags:
        - Services
      parameters:
        - $ref: "#/components/parameters/OriginId"
        - $ref: "#/components/parameters/ServiceId"
      responses:
        "200":
          description: The retrieved status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceStatus"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /origins/{originId}/services/{serviceId}/monitors:
    get:
      summary: Retrieve all monitors for a service of an origin
      tags:
        - Monitors
      parameters:
        - $ref: "#/components/parameters/OriginId"
        - $ref: "#/components/parameters/ServiceId"
      responses:
        "200":
          description: The retrieved monitors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Monitors"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /origins/{originId}/services/{serviceId}/monitors/{monitorId}:
    get:
      summary: Retrieve a monitor of a service from an origin
      tags:
        - Monitors
      parameters:
        - $ref: "#/components/parameters/OriginId"
        - $ref: "#/components/parameters/ServiceId"
        - $ref: "#/components/parameters/MonitorId"
      responses:
        "200":
          description: The retrieved monitor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Monitor"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /origins/{originId}/services/{serviceId}/monitors/{monitorId}/status:
    get:
      summary: Retrieve the status of a monitor
      tags:
        - Monitors
      parameters:
        - $ref: "#/components/parameters/OriginId"
        - $ref: "#/components/parameters/ServiceId"
        - $ref: "#/components/parameters/MonitorId"
      responses:
        "200":
          description: The retrieved status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MonitorStatus"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /peers:
    get:
      summary: Retrieve all peers
      tags:
        - Peers
      responses:
        "200":
          description: The retrieved peers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Peers"
  /peers/{peerId}:
    get:
      summary: Retrieve a peer
      tags:
        - Peers
      parameters:
        - $ref: "#/components/parameters/PeerId"
      responses:
        "200":
          description: The retrieved peer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Peer"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


tags:
  - name: Origins
    description: Origin-related endpoints
  - name: Services
    description: Services-related endpoints
  - name: Monitors
    description: Monitors-related endpoints
  - name: Peers
    description: Peers-related endpoints


components:
  schemas:
    Origins:
      type: object
      required:
        - objects
      properties:
        objects:
          type: array
          items:
            $ref: "#/components/schemas/Origin"
    Origin:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: A globally unique identifier for the origin

    Services:
      type: object
      required:
        - services
      properties:
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
    Service:
      type: object
      required:
        - id
        - name
        - status
        - private
        - status
        - lastSeen
        - origin
      properties:
        id:
          type: string
          description: An identifier for the service, unique for the origin
        name:
          type: string
          description: Name of the service
        description:
          type: string
          description: Description of the service
        private:
          type: bool
          description: Whether or not the config is shared with the cluster
        status:
          $ref: "#/components/schemas/ServiceStatus"
        lastSeen:
          type: string
          description: The timestamp at which the service was last seen responding
        origin:
          type: string
          description: The origin node from which this service is configured
    ServiceStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: The current status of the service

    Monitors:
      type: object
      required:
        - monitors
      properties:
        monitors:
          type: array
          items:
            $ref: "#/components/schemas/Monitor"
    Monitor:
      type: object
      required:
        - id
        - name
        - description
        - type
        - service
        - status
      properties:
        id:
          type: string
          description: An identifier for the monitor, unique for the service
        name:
          type: string
          description: Name of the monitor
        description:
          type: string
          description: Description of the monitor
        type:
          type: string
          description: Type of the monitor
        service:
          type: string
          description: The id of the parent service
        status:
          $ref: "#/components/schemas/MonitorStatus"
    MonitorStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: The current status of the monitor

    Peers:
      type: object
      required:
        - peers
      properties:
        peers:
          type: array
          items:
            $ref: "#/components/schemas/Peer"
    Peer:
      type: object
      required:
        - name
        - bind
        - status
      properties:
        name:
          type: string
          description: The name of the peer
        bind:
          type: string
          description: The address and port of the peer
        status:
          type: string
          description: The status of the peer

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string


  parameters:
    OriginId:
      in: path
      name: originId
      schema:
        type: string
      required: true
      description: The id of the target origin
    ServiceId:
      in: path
      name: serviceId
      schema:
        type: string
      required: true
      description: The id of the target service
    MonitorId:
      in: path
      name: monitorId
      schema:
        type: string
      required: true
      description: The id of the target monitor
    PeerId:
      in: path
      name: peerId
      schema:
        type: string
      required: true
      description: The id of the target peer
