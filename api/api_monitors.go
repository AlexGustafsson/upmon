/*
 * upmon
 *
 * A cloud-native, distributed uptime monitor written in Go
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MonitorsApiService MonitorsApi service
type MonitorsApiService service

type ApiOriginsOriginIdServicesServiceIdMonitorsGetRequest struct {
	ctx        _context.Context
	ApiService *MonitorsApiService
	originId   string
	serviceId  string
}

func (r ApiOriginsOriginIdServicesServiceIdMonitorsGetRequest) Execute() (Monitors, *_nethttp.Response, error) {
	return r.ApiService.OriginsOriginIdServicesServiceIdMonitorsGetExecute(r)
}

/*
 * OriginsOriginIdServicesServiceIdMonitorsGet Retrieve all monitors for a service of an origin
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param originId The id of the target origin
 * @param serviceId The id of the target service
 * @return ApiOriginsOriginIdServicesServiceIdMonitorsGetRequest
 */
func (a *MonitorsApiService) OriginsOriginIdServicesServiceIdMonitorsGet(ctx _context.Context, originId string, serviceId string) ApiOriginsOriginIdServicesServiceIdMonitorsGetRequest {
	return ApiOriginsOriginIdServicesServiceIdMonitorsGetRequest{
		ApiService: a,
		ctx:        ctx,
		originId:   originId,
		serviceId:  serviceId,
	}
}

/*
 * Execute executes the request
 * @return Monitors
 */
func (a *MonitorsApiService) OriginsOriginIdServicesServiceIdMonitorsGetExecute(r ApiOriginsOriginIdServicesServiceIdMonitorsGetRequest) (Monitors, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Monitors
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorsApiService.OriginsOriginIdServicesServiceIdMonitorsGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/origins/{originId}/services/{serviceId}/monitors"
	localVarPath = strings.Replace(localVarPath, "{"+"originId"+"}", _neturl.PathEscape(parameterToString(r.originId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", _neturl.PathEscape(parameterToString(r.serviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdGetRequest struct {
	ctx        _context.Context
	ApiService *MonitorsApiService
	originId   string
	serviceId  string
	monitorId  string
}

func (r ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdGetRequest) Execute() (Monitor, *_nethttp.Response, error) {
	return r.ApiService.OriginsOriginIdServicesServiceIdMonitorsMonitorIdGetExecute(r)
}

/*
 * OriginsOriginIdServicesServiceIdMonitorsMonitorIdGet Retrieve a monitor of a service from an origin
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param originId The id of the target origin
 * @param serviceId The id of the target service
 * @param monitorId The id of the target monitor
 * @return ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdGetRequest
 */
func (a *MonitorsApiService) OriginsOriginIdServicesServiceIdMonitorsMonitorIdGet(ctx _context.Context, originId string, serviceId string, monitorId string) ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdGetRequest {
	return ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		originId:   originId,
		serviceId:  serviceId,
		monitorId:  monitorId,
	}
}

/*
 * Execute executes the request
 * @return Monitor
 */
func (a *MonitorsApiService) OriginsOriginIdServicesServiceIdMonitorsMonitorIdGetExecute(r ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdGetRequest) (Monitor, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Monitor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorsApiService.OriginsOriginIdServicesServiceIdMonitorsMonitorIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/origins/{originId}/services/{serviceId}/monitors/{monitorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"originId"+"}", _neturl.PathEscape(parameterToString(r.originId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", _neturl.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"monitorId"+"}", _neturl.PathEscape(parameterToString(r.monitorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetRequest struct {
	ctx        _context.Context
	ApiService *MonitorsApiService
	originId   string
	serviceId  string
	monitorId  string
}

func (r ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetRequest) Execute() (MonitorStatus, *_nethttp.Response, error) {
	return r.ApiService.OriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetExecute(r)
}

/*
 * OriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGet Retrieve the status of a monitor
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param originId The id of the target origin
 * @param serviceId The id of the target service
 * @param monitorId The id of the target monitor
 * @return ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetRequest
 */
func (a *MonitorsApiService) OriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGet(ctx _context.Context, originId string, serviceId string, monitorId string) ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetRequest {
	return ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetRequest{
		ApiService: a,
		ctx:        ctx,
		originId:   originId,
		serviceId:  serviceId,
		monitorId:  monitorId,
	}
}

/*
 * Execute executes the request
 * @return MonitorStatus
 */
func (a *MonitorsApiService) OriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetExecute(r ApiOriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGetRequest) (MonitorStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitorStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorsApiService.OriginsOriginIdServicesServiceIdMonitorsMonitorIdStatusGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/origins/{originId}/services/{serviceId}/monitors/{monitorId}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"originId"+"}", _neturl.PathEscape(parameterToString(r.originId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serviceId"+"}", _neturl.PathEscape(parameterToString(r.serviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"monitorId"+"}", _neturl.PathEscape(parameterToString(r.monitorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
