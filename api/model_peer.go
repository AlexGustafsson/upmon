/*
 * upmon
 *
 * A cloud-native, distributed uptime monitor written in Go
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Peer struct for Peer
type Peer struct {
	// The name of the peer
	Name string `json:"name"`
	// The address of the peer
	Address string `json:"address"`
	// The port of the peer
	Port float32 `json:"port"`
	// The status of the peer
	Status string `json:"status"`
}

// NewPeer instantiates a new Peer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeer(name string, address string, port float32, status string) *Peer {
	this := Peer{}
	this.Name = name
	this.Address = address
	this.Port = port
	this.Status = status
	return &this
}

// NewPeerWithDefaults instantiates a new Peer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeerWithDefaults() *Peer {
	this := Peer{}
	return &this
}

// GetName returns the Name field value
func (o *Peer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Peer) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Peer) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *Peer) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Peer) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Peer) SetAddress(v string) {
	o.Address = v
}

// GetPort returns the Port field value
func (o *Peer) GetPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *Peer) GetPortOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *Peer) SetPort(v float32) {
	o.Port = v
}

// GetStatus returns the Status field value
func (o *Peer) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Peer) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Peer) SetStatus(v string) {
	o.Status = v
}

func (o Peer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullablePeer struct {
	value *Peer
	isSet bool
}

func (v NullablePeer) Get() *Peer {
	return v.value
}

func (v *NullablePeer) Set(val *Peer) {
	v.value = val
	v.isSet = true
}

func (v NullablePeer) IsSet() bool {
	return v.isSet
}

func (v *NullablePeer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeer(val *Peer) *NullablePeer {
	return &NullablePeer{value: val, isSet: true}
}

func (v NullablePeer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


