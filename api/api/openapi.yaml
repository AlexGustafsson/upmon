openapi: 3.0.0
info:
  description: A cloud-native, distributed uptime monitor written in Go
  title: upmon
  version: 0.1.0
servers:
- description: Development server
  url: http://localhost:8080/api/v1
tags:
- description: Services-related endpoints
  name: Services
- description: Peers-related endpoints
  name: Peers
paths:
  /services:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'
          description: The retrieved services
      summary: Retrieve all monitored services
      tags:
      - Services
  /services/{serviceId}:
    get:
      parameters:
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: The retrieved service
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve a service
      tags:
      - Services
  /services/{serviceId}/status:
    get:
      parameters:
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: The retrieved status
      summary: Retrieve the status of a service
      tags:
      - Services
  /peers:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peers'
          description: The retrieved peers
      summary: Retrieve all peers
      tags:
      - Peers
  /peers/{peerId}:
    get:
      parameters:
      - description: The id of the target peer
        explode: false
        in: path
        name: peerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peer'
          description: The retrieved peer
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve a peer
      tags:
      - Peers
components:
  parameters:
    ServiceId:
      description: The id of the target service
      explode: false
      in: path
      name: serviceId
      required: true
      schema:
        type: string
      style: simple
    PeerId:
      description: The id of the target peer
      explode: false
      in: path
      name: peerId
      required: true
      schema:
        type: string
      style: simple
  schemas:
    Services:
      example:
        services:
        - private: ""
          lastSeen: lastSeen
          name: name
          description: description
          status: status
        - private: ""
          lastSeen: lastSeen
          name: name
          description: description
          status: status
      properties:
        services:
          items:
            $ref: '#/components/schemas/Service'
          type: array
      required:
      - services
      type: object
    Service:
      example:
        private: ""
        lastSeen: lastSeen
        name: name
        description: description
        status: status
      properties:
        name:
          description: Name of the service
          type: string
        description:
          description: Description of the service
          type: string
        private:
          description: Whether or not the config is shared with the cluster
          type: bool
        status:
          description: The current status of the service
          type: string
        lastSeen:
          description: The timestamp at which the service was last seen responding
          type: string
      required:
      - lastSeen
      - name
      - private
      - status
      - status
      type: object
    ServiceStatus:
      example:
        status: status
      properties:
        status:
          description: The current status of the service
          type: string
      required:
      - status
      type: object
    Peers:
      example:
        peers:
        - bind: bind
          name: name
          status: status
        - bind: bind
          name: name
          status: status
      properties:
        peers:
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      required:
      - peers
      type: object
    Peer:
      example:
        bind: bind
        name: name
        status: status
      properties:
        name:
          description: The name of the peer
          type: string
        bind:
          description: The address and port of the peer
          type: string
        status:
          description: The status of the peer
          type: string
      required:
      - bind
      - name
      - status
      type: object
    ErrorResponse:
      properties:
        error:
          type: string
      required:
      - error
      type: object
