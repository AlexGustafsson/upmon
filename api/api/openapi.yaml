openapi: 3.0.0
info:
  description: A cloud-native, distributed uptime monitor written in Go
  title: upmon
  version: 0.1.0
servers:
- description: Development server
  url: http://localhost:8080/api/v1
tags:
- description: Origin-related endpoints
  name: Origins
- description: Services-related endpoints
  name: Services
- description: Monitors-related endpoints
  name: Monitors
- description: Peers-related endpoints
  name: Peers
paths:
  /origins:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Origins'
          description: The retrieved origins
      summary: Retrieve all origins
      tags:
      - Origins
  /origins/{originId}:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Origin'
          description: The retrieved origin
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve an origin
      tags:
      - Origins
  /services:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'
          description: The retrieved services
      summary: Retrieve all monitored services
      tags:
      - Services
  /origins/{originId}/services:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Services'
          description: The retrieved services
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve all monitored services for an origin
      tags:
      - Services
  /origins/{originId}/services/{serviceId}:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: The retrieved service
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve a service
      tags:
      - Services
  /origins/{originId}/services/{serviceId}/status:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: The retrieved status
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve the status of a service
      tags:
      - Services
  /origins/{originId}/services/{serviceId}/monitors:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitors'
          description: The retrieved monitors
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve all monitors for a service of an origin
      tags:
      - Monitors
  /origins/{originId}/services/{serviceId}/monitors/{monitorId}:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target monitor
        explode: false
        in: path
        name: monitorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: The retrieved monitor
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve a monitor of a service from an origin
      tags:
      - Monitors
  /origins/{originId}/services/{serviceId}/monitors/{monitorId}/status:
    get:
      parameters:
      - description: The id of the target origin
        explode: false
        in: path
        name: originId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the target monitor
        explode: false
        in: path
        name: monitorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorStatus'
          description: The retrieved status
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve the status of a monitor
      tags:
      - Monitors
  /peers:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peers'
          description: The retrieved peers
      summary: Retrieve all peers
      tags:
      - Peers
  /peers/{peerId}:
    get:
      parameters:
      - description: The id of the target peer
        explode: false
        in: path
        name: peerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Peer'
          description: The retrieved peer
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found
      summary: Retrieve a peer
      tags:
      - Peers
components:
  parameters:
    OriginId:
      description: The id of the target origin
      explode: false
      in: path
      name: originId
      required: true
      schema:
        type: string
      style: simple
    ServiceId:
      description: The id of the target service
      explode: false
      in: path
      name: serviceId
      required: true
      schema:
        type: string
      style: simple
    MonitorId:
      description: The id of the target monitor
      explode: false
      in: path
      name: monitorId
      required: true
      schema:
        type: string
      style: simple
    PeerId:
      description: The id of the target peer
      explode: false
      in: path
      name: peerId
      required: true
      schema:
        type: string
      style: simple
  schemas:
    Origins:
      example:
        objects:
        - id: id
        - id: id
      properties:
        objects:
          items:
            $ref: '#/components/schemas/Origin'
          type: array
      required:
      - objects
      type: object
    Origin:
      example:
        id: id
      properties:
        id:
          description: A globally unique identifier for the origin
          type: string
      required:
      - id
      type: object
    Services:
      example:
        services:
        - private: ""
          lastSeen: lastSeen
          origin: origin
          name: name
          description: description
          id: id
          status:
            status: status
        - private: ""
          lastSeen: lastSeen
          origin: origin
          name: name
          description: description
          id: id
          status:
            status: status
      properties:
        services:
          items:
            $ref: '#/components/schemas/Service'
          type: array
      required:
      - services
      type: object
    Service:
      example:
        private: ""
        lastSeen: lastSeen
        origin: origin
        name: name
        description: description
        id: id
        status:
          status: status
      properties:
        id:
          description: An identifier for the service, unique for the origin
          type: string
        name:
          description: Name of the service
          type: string
        description:
          description: Description of the service
          type: string
        private:
          description: Whether or not the config is shared with the cluster
          type: bool
        status:
          $ref: '#/components/schemas/ServiceStatus'
        lastSeen:
          description: The timestamp at which the service was last seen responding
          type: string
        origin:
          description: The origin node from which this service is configured
          type: string
      required:
      - id
      - lastSeen
      - name
      - origin
      - private
      - status
      - status
      type: object
    ServiceStatus:
      example:
        status: status
      properties:
        status:
          description: The current status of the service
          type: string
      required:
      - status
      type: object
    Monitors:
      example:
        monitors:
        - service: service
          name: name
          description: description
          id: id
          type: type
          status:
            up: 0
            transitioningDown: 5
            down: 6
            transitioningUp: 1
            unknown: 5
        - service: service
          name: name
          description: description
          id: id
          type: type
          status:
            up: 0
            transitioningDown: 5
            down: 6
            transitioningUp: 1
            unknown: 5
      properties:
        monitors:
          items:
            $ref: '#/components/schemas/Monitor'
          type: array
      required:
      - monitors
      type: object
    Monitor:
      example:
        service: service
        name: name
        description: description
        id: id
        type: type
        status:
          up: 0
          transitioningDown: 5
          down: 6
          transitioningUp: 1
          unknown: 5
      properties:
        id:
          description: An identifier for the monitor, unique for the service
          type: string
        name:
          description: Name of the monitor
          type: string
        description:
          description: Description of the monitor
          type: string
        type:
          description: Type of the monitor
          type: string
        service:
          description: The id of the parent service
          type: string
        status:
          $ref: '#/components/schemas/MonitorStatus'
      required:
      - description
      - id
      - name
      - service
      - status
      - type
      type: object
    MonitorStatus:
      example:
        up: 0
        transitioningDown: 5
        down: 6
        transitioningUp: 1
        unknown: 5
      properties:
        up:
          description: The number of cluster members voting for up
          type: integer
        down:
          description: The number of cluster members voting for down
          type: integer
        transitioningUp:
          description: The number of cluster members voting for transitioning up
          type: integer
        transitioningDown:
          description: The number of cluster members voting for transitioning down
          type: integer
        unknown:
          description: The number of cluster members voting for unknown
          type: integer
      required:
      - down
      - transitioningDown
      - transitioningUp
      - unknown
      - up
      type: object
    Peers:
      example:
        peers:
        - bind: bind
          name: name
          status: status
        - bind: bind
          name: name
          status: status
      properties:
        peers:
          items:
            $ref: '#/components/schemas/Peer'
          type: array
      required:
      - peers
      type: object
    Peer:
      example:
        bind: bind
        name: name
        status: status
      properties:
        name:
          description: The name of the peer
          type: string
        bind:
          description: The address and port of the peer
          type: string
        status:
          description: The status of the peer
          type: string
      required:
      - bind
      - name
      - status
      type: object
    ErrorResponse:
      properties:
        error:
          type: string
      required:
      - error
      type: object
